<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="CN1UWPPort" default="default" basedir=".">
    <description>Builds, tests, and runs the project CN1UWPPort.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar:                  JAR building
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="CN1UWPPort-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->
    
    <property name="ikvm.relpath" value="ikvm-uwp/ikvm-winrt-v3"/>
    <target name="file-checks">
        <available file="${ikvm.relpath}"  property="ikvm.found"/>
    </target>
    <target name="get-ikvm" depends="file-checks" unless="ikvm.found" description="Install IKVM">
        <mkdir dir="ikvm-uwp"/>
        <exec executable="git">
            <arg value="clone"/>
            <arg value="https://github.com/shannah/cn1-ikvm-uwp.git"/>
            <arg value="${ikvm.relpath}"/>
        </exec>
    </target>
    
    
    <target name="cn1-home">
        <property name="cn1.home" value="../CodenameOne"/>
        <property name="cn1.dir" location="${cn1.home}"/>
        <fail message="cn1.home property should point to the Codename One home directory.  It could not be found.  Currently pointing to ${cn1.home}">
            <condition>
                <not>
                    <available file="${cn1.dir}"/>
                </not>
            </condition>
        </fail>
        
    </target>
    
    <target name="setup" depends="configure,get-ikvm,cn1-home" description="Setup a CN1 project to do UWP builds">
        <fail message="Please specify the project to set up using the codename1.project.dir property.  E.g. add -Dcodename1.project.dir=path/to/project to your command line args.">
            <condition>
                <not><isset property="codename1.project.dir"/></not>
            </condition>
        </fail>
        <fail message="The specified Codename One project could not be found.">
            <condition>
                <not>
                    <available file="${codename1.project.dir}"/>
                </not>
            </condition>
        </fail>
        
        <copy file="build-win-template.xml" tofile="${codename1.project.dir}/build-win.xml"/>
        <property name="ikvm.fullpath" location="${ikvm.relpath}"/>
        <property name="basedir.fullpath" location="."/>
        <propertyfile file="${codename1.project.dir}/codenameone_settings.properties">
            <entry key="ikvm.dir" value="${ikvm.fullpath}"/>
            <entry key="uwp.port.dir" value="${basedir.fullpath}"/>
            <entry key="cn1.home" value="${cn1.dir}"/>
            
        </propertyfile>
        
    </target>
    
    <target name="configure" description="Configures the dependencies">
        <mkdir dir="TestProject/lib"/>
        
        <get src="https://github.com/shannah/binaries/raw/master/cn1-common/CLDC11.jar" dest="TestProject/lib/CLDC11.jar" skipexisting="true"/>
        <get skipexisting="true" src="https://github.com/shannah/binaries/raw/master/cn1-common/CodeNameOneBuildClient.jar" dest="TestProject/CodeNameOneBuildClient.jar"/>
        <get skipexisting="true" src="https://github.com/shannah/binaries/raw/master/cn1-common/JavaSE.jar" dest="TestProject/JavaSE.jar"/>
        <get skipexisting="true" src="https://github.com/shannah/binaries/raw/master/cn1-common/CodenameOne.jar" dest="TestProject/lib/CodenameOne.jar"/>
        <get skipexisting="true" src="https://github.com/shannah/binaries/raw/master/cn1-common/CodenameOne_SRC.zip" dest="TestProject/lib/CodenameOne_SRC.zip"/>
        <propertyfile
            file="TestProject/nbproject/project.properties"
            comment="My properties">
          <entry  key="file.reference.CodenameOne.jar" value="lib/CodenameOne.jar"/>
          <entry  key="file.reference.JavaSE.jar" value="JavaSE.jar"/>
        </propertyfile>
    </target>
    
    <target name="update-project-template-dlls" depends="cn1-home,get-ikvm" description="Updates the VSProjectTemplate with the dlls from IKVM">
        <property name="vsproject.template.dir" location="${cn1.dir}/Ports/UWP/VSProjectTemplate"/>
        <property name="vsproject.lib.dir" location="${vsproject.template.dir}/UWPApp/lib"/>
        <copy file="${ikvm.relpath}/bin/IKVM.OpenJDK.Text.dll" tofile="${vsproject.lib.dir}/IKVM.OpenJDK.Text.dll" overwrite="true"/>
        <copy file="${ikvm.relpath}/bin/IKVM.OpenJDK.Core.dll" tofile="${vsproject.lib.dir}/IKVM.OpenJDK.Core.dll" overwrite="true"/>
        <copy file="${ikvm.relpath}/bin/IKVM.OpenJDK.Util.dll" tofile="${vsproject.lib.dir}/IKVM.OpenJDK.Util.dll" overwrite="true"/>
        <copy file="${ikvm.relpath}/bin/IKVM.OpenJDK.Security.dll" tofile="${vsproject.lib.dir}/IKVM.OpenJDK.Security.dll" overwrite="true"/>
        <copy file="${ikvm.relpath}/bin/IKVM.Runtime.dll" tofile="${vsproject.lib.dir}/IKVM.Runtime.dll" overwrite="true"/>
    </target>
    
    
    <target name="compile-ikvm" depends="get-ikvm" description="Compile IKVM from source">
        <!-- This target compiles all of IKVM from source.  This includes compiling
         OpenJDK, which takes about 20 minutes on my MS Surface 1.
         Only use this option if you've made changes to the OpenJDK source.  If you've
         only made changes inside the ikvm/runtime directory, then you should use the
         compile-ikvm-runtime target.
        -->
        <echo>
            Compiling IKVM from Source...
            This includes compiling
            OpenJDK, which takes about 20 minutes on my MS Surface 1.
            Only use this option if you've made changes to the OpenJDK source.  If you've
            only made changes inside the ikvm/runtime directory, then you should use the
            compile-ikvm-runtime target.
        </echo>
        <ant dir="${ikvm.relpath}" target="compile-all"/>
    </target>
    
    <target name="compile-ikvm-runtime" depends="get-ikvm" description="Compile IKVM from source">
        <!-- This target compiles only the IKVM runtime.  Use this if you've made changes to
        the IKVM runtime only (hopefully this is most of the time).  If you have made changes
        to the OpenJDK or files outside of the ikvm/runtime directory, then you should use
        the compile-all target.-->
        <echo>
            Compiling the IKVM runtime from source.
            This target compiles only the IKVM runtime.  Use this if you've made changes to
            the IKVM runtime only (hopefully this is most of the time).  If you have made changes
            to the OpenJDK or files outside of the ikvm/runtime directory, then you should use
            the compile-all target.
        </echo>
        <ant dir="${ikvm.relpath}" target="compile-runtime"/>
    </target>
    
    <target name="copy-jar-to-bin" depends="jar" description="Copy jar to bin">
        <copy file="dist/CN1UWPPort.jar" tofile="bin/CN1UWPPort.jar" overwrite="true"/>
        
    </target>
    
    <target name="create-uwp-wrapper" depends="get-ikvm,configure" description="Generates the UWPWrapper.zip file">
        <delete file="dist/uwpwrapper.zip"/>
        <delete file="dist/ikvm.zip"/>
        <zip file="dist/uwpwrapper.zip">
            <fileset dir="." includes="bin/**,TestProject/**" excludes="TestProject/UWPProject/UWPApp/repro*/**,TestProject/src/**,TestProject/dist/**,TestProject/build/**,TestProject/lib/**,TestProject/JavaSE.jar,TestProject/UWPProject/UWPApp/AppPackages/**,TestProject/UWPProject/UWPApp/bin/**,TestProject/UWPProject/UWPApp/lib/**,TestProject/UWPProject/UWPApp/obj/**,TestProject/UWPProject/UWPApp/Assets/**"/>
        </zip>
        <ant dir="${ikvm.relpath}" target="create-release-zip" inheritall="false"/>
        <copy file="${ikvm.relpath}/dist/ikvm.zip" tofile="dist/ikvm.zip"/>
        
        
    </target>
</project>
